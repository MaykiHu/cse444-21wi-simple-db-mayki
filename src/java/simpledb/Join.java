package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate p;  // the predicate to use to join the children
    private OpIterator child1;  // itr for left/outer relation to join
    private OpIterator child2;  // itr for right/inner relation to join
    private Tuple c1Tuple;  // the (outer) tuple to match join on

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        c1Tuple = null;
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // Get field name of child1 from field index (getField1)
        return child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // Get field name of child2 from field index (getField2)
        return child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // Return merged TupleDesc of child1 followed by child2
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        c1Tuple = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // if there are more tuples to match on / still matching outer tuple c1
        while (child1.hasNext() || c1Tuple != null) {
            if (c1Tuple == null) {  // if we don't have a specific outer tuple
                c1Tuple = child1.next();  // get next outer tuple to match on
            }
            while (child2.hasNext()) {
                Tuple c2Tuple = child2.next();
                if (p.filter(c1Tuple, c2Tuple)) { // if join passes on pred.
                    // Various information about child1/child2 tuple desc
                    Tuple newTuple = new Tuple(getTupleDesc());
                    TupleDesc td1 = child1.getTupleDesc();
                    TupleDesc td2 = child2.getTupleDesc();
                    int td1Size = td1.numFields();
                    int td2Size = td2.numFields();
                    // Set fields of new tuple (c1 fields, c2 fields)
                    for (int i = 0; i < td1Size; i++) {
                        newTuple.setField(i, c1Tuple.getField(i));
                    }
                    for (int i = 0; i < td2Size; i++) {
                        newTuple.setField(i + td1Size, c2Tuple.getField(i));
                    }
                    return newTuple;
                }
                // join did not pass for this inner tuple c2, keep searching
            }
            c1Tuple = null;  // indicate to get new c1Tuple to match on and
            child2.rewind();  // get fresh set of inner tuples to itr on
        }
        return null;  // no more tuples to match on
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[]{child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // Set children only if different children are given
        // Inspired by Project implementation
        if (child1 != children[0]) {
            child1 = children[0];
        }
        if (child2 != children[1]) {
            child2 = children[1];
        }
    }

}
